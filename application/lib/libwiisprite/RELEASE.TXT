#################################################
#                                               #
#  libwiisprite - v0.3.0b                        #
#                                               #
#################################################
#  Written by Chaosteil and Feesh!              #
#################################################

~~Release Notes~~

libwiisprite is a new sprite library which uses GX as
its underlying rendering engine. All graphical calculations
and performed by the GPU and not the CPU!

libwiisprite is currently under heavy development, but this
version is a semi-stable version allowing most of the proposed
functionality of the library.

All possible pngs can be loaded, even the ones with an alpha layer,
so you can get started immediately!
 
The library comes with full Doxygen documentation to help
get development started.

~~Installation~~

Please refer to the README.TXT for installation instructions.

~~Thanks~~

Thanks go out firstly to Dhewg for helping us out with the GX
texture format, Redshade for very good GX hints, the creators of
libOGC, DevkitPPC, the Homebrew Channel and last but not least the
members of #wiidev on EFNet.

~~New in this release~~
0.3.0b
*Fixed a memory leak in the image class. Thanks to DragonMin for pointing the error out.
*Fixed a bug where one would reset an image of a sprite with Sprite::SetImage() and not get the previous data if applicable for keeping of the old data.
*Collision can now also be used with refpixel positioning, however, the pixel has to be at the center of the image for now.

0.3.0a
*Fixed an initializing bug when using a drawable image.

0.3.0
*Added a reference pixel system. It allows to rotate and scale a sprite around a specific point on itself. Check the documentation how to use it. The spritetest example also has a little example on it.
*Fixed a huge memory leak when loading an image which was in every previous version. Upgrading is recommended.
*Several speedups which can increase the speed of the library when drawing sprites and tiledlayers.

~~Previous releases~~
0.2.3
*All possible png files can now be loaded.
*Image has now a "DestroyImage()" method to allow to reload the image after that.

0.2.2
*Image now supports loading from a buffer. Now you don't have to specify a path, but you can use a raw2c converted file or your own buffer of a png file. The documentation has a whole page dedicated to it.
*Quad visibility check fixed. Thanks to crediar for finding the bug.
*GameWindow now is a tad faster at initializing. Thanks go to shagkur.
*Updated spritetest to load one image from buffer.
*Several small bugfixes for the library to make it even more stable.

0.2.1
*Sprites now also can use additional collision detection which includes the rotation and the zoom of the sprite. Check the documentation on how to do it.
*Implemented additive blending which can be useful for particle effects. Check the transformation enum in sprites.
*Fixed a bug with transformations. Now Sprite accepts u8, so transformations can be used as flags.
*Added defines for IR pointer correction. Check spritetest on how to use the pointer the right way.
*Several additions to GameWindow: You can now stop the Video subsystem, as well as poll for the height and width of the screen.
*You can now use Image to draw on the image. You must derive from the image to an own class to use it.
*Images can now only initialized only once. This prevents from freaking Sprites and TiledLayers out when changing images.
*Some optimizations here and there.

0.2.0
*Quad was added as an additional Layer-based class to use. You can now draw colored rectangles without textures.
*TiledLayer now supports transparency.
*Sprites can now get stretched with SetStretchWidth() and SetStretchHeight(). Check out the documentation for further instructions.
*You can get information about the current position of the sequence in a Sprite with GetFrameSequencePos().
*Frame sequences in Sprites now can get actually longer than the image has tiles.
*Layer got additional SetX() and SetY() methods for quicker position setting of one axis.
*LayerManagers now can erase their Layer list with RemoveAll().
*Bilinear filtering for textures can be turned off now. Look up the texture transformation enumeration for sprites.
*Fixed showing up of a green bar on startup.
*Squished out several small bugs to enhance stability. Also possible performance increase.
*Image.LoadImage() now returns an error code when loading an image with a wrong format.
*Loading of 24bit PNGs is also possible now.
*Complete compatibility with the previous version. Your code should work out of the box with no changes at all.
*There is now a Makefile for installing libwiisprite to your appropriate folders. Check RELEASE.TXT for further information.
*Documentation is more complete. There are several pages which explain the more "advanced" features of the library.
*All the examples got updated. We also added an template example.

0.1.9
*This is mainly a bugfix release, no new features included. You may need to update your sources to correctly use the display now.
*Added a wrong size check to image loading errors. Image width and height have to be a multiple of 4.
*The whole screen estate is used. Pointer correction is also explained in the spritetest example.
*LayerManager.SetViewWindow() fixed. Displays correctly now.
*Fixed TiledLayer displaying (last version crashed GX) and collision detecting with sprites.
*Now doing more checks throughout the code.

0.1.8b
*Now Sprites have SetTransparency() and GetTransparency() methods. It is documentated in the documentation. The spritetest example also got updated, you can now set transparency with the A and B buttons.

~~Bugs~~

If you find a bug please send an e-mail to chaosteil@gmail.com or
gummybassist@gmail.com or if you are on an EFNet server, PM 
Chaosteil or feesh. 
